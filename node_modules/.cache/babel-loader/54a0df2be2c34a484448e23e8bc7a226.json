{"ast":null,"code":"import { APIs, postJSON, parseResult } from './common';\nimport $ from 'jquery';\nexport class ZaloPay {\n  static listenCallback(apptransid, cb) {\n    const ws = new WebSocket(APIs.SUBSCRIBE + \"?apptransid=\" + apptransid);\n    console.log(APIs.SUBSCRIBE + \"?apptransid=\" + apptransid);\n    console.log(ws); // ws.onopen = e => {\n    //     console.log('open ws', apptransid);\n    // };\n\n    ws.onmessage = e => {\n      const data = JSON.parse(e.data);\n      console.log('ws message', data);\n      cb(data);\n      alert('Thanh toán thành công');\n    }; // ws.onclose = e => {\n    //     console.log('close ws', apptransid);\n    // };\n\n  }\n\n  static pay(url, data = {}, done) {\n    return postJSON(url, data, done, () => {\n      alert('Thanh toán thất bại');\n    });\n  }\n\n  static qr(data, done) {\n    ZaloPay.pay(APIs.QR, data, res => {\n      if (res.returncode === 1) {\n        console.log(res);\n        done(res);\n      } else {\n        alert(parseResult(res));\n      }\n    });\n  }\n\n  static gateway(data) {\n    ZaloPay.pay(APIs.GATEWAY, data, orderurl => {\n      window.open(orderurl);\n    });\n  }\n\n  static quickPay(data, done) {\n    ZaloPay.pay(APIs.QUICKPAY, data, res => {\n      if (res.returncode >= 1) {\n        if (res.returncode === 1) {\n          alert('Thanh toán thành công');\n        } else {\n          done(res);\n        }\n      } else {\n        alert(parseResult(res));\n      }\n    });\n  }\n\n  static getbanklist(done) {\n    $.getJSON(APIs.GETBANKLIST).done(res => {\n      if (res.returncode === 1) {\n        const banklist = [];\n        const {\n          banks\n        } = res;\n\n        for (const id in banks) {\n          const banklistOfId = banks[id];\n\n          for (const bank of banklistOfId) {\n            banklist.push(bank);\n          }\n        }\n\n        done(banklist);\n      } else {\n        alert(parseResult(res));\n      }\n    }).fail(_ => alert('Không thể lấy danh sách ngân hàng'));\n  }\n\n  static refund(data, done) {\n    return postJSON(APIs.REFUND, data, res => {\n      alert(parseResult(res));\n      done(res);\n    }, () => {\n      alert('Hoàn tiền thất bại');\n    });\n  }\n\n  static getRefundStatus(mrefundid) {\n    return $.getJSON(APIs.GETREFUNDSTATUS + '?mrefundid=' + mrefundid).done(res => {\n      alert(parseResult(res));\n    }).fail(_ => alert('Không thể lấy trạng thái hoàn tiền'));\n  }\n\n}","map":{"version":3,"sources":["/Users/xuanloc/Documents/pet-shop/PetShopProject/frontend/src/components/zalopay.js"],"names":["APIs","postJSON","parseResult","$","ZaloPay","listenCallback","apptransid","cb","ws","WebSocket","SUBSCRIBE","console","log","onmessage","e","data","JSON","parse","alert","pay","url","done","qr","QR","res","returncode","gateway","GATEWAY","orderurl","window","open","quickPay","QUICKPAY","getbanklist","getJSON","GETBANKLIST","banklist","banks","id","banklistOfId","bank","push","fail","_","refund","REFUND","getRefundStatus","mrefundid","GETREFUNDSTATUS"],"mappings":"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","sourcesContent":["import { APIs, postJSON, parseResult } from './common';\nimport $ from 'jquery'; \n\nexport class ZaloPay {\n    static listenCallback(apptransid, cb) {\n        const ws = new WebSocket(APIs.SUBSCRIBE + \"?apptransid=\" + apptransid);\n        console.log(APIs.SUBSCRIBE + \"?apptransid=\" + apptransid)\n        console.log(ws)\n        // ws.onopen = e => {\n        //     console.log('open ws', apptransid);\n        // };\n        ws.onmessage = e => {\n            const data = JSON.parse(e.data);\n            console.log('ws message', data);\n            cb(data);\n            alert('Thanh toán thành công');\n        };\n        // ws.onclose = e => {\n        //     console.log('close ws', apptransid);\n        // };\n    }\n\n    static pay(url, data = {}, done) {\n        return postJSON(url, data, done, () => {\n            alert('Thanh toán thất bại');\n        })\n    }\n  \n    static qr(data, done) {\n        ZaloPay.pay(APIs.QR, data, res => {\n            if (res.returncode === 1) {\n                console.log(res)\n                done(res);\n            } else {\n                alert(parseResult(res));\n            }\n        });\n    }\n\n  static gateway(data) {\n    ZaloPay.pay(APIs.GATEWAY, data, orderurl => {\n      window.open(orderurl);\n    });\n  }\n\n  static quickPay(data, done) {\n    ZaloPay.pay(APIs.QUICKPAY, data, res => {\n      if (res.returncode >= 1) {\n        if (res.returncode === 1) {\n          alert('Thanh toán thành công');\n        } else {\n          done(res);\n        }\n      } else {\n        alert(parseResult(res));\n      }\n    });\n  }\n\n  static getbanklist(done) {\n    $.getJSON(APIs.GETBANKLIST)\n    .done(res => {\n      if (res.returncode === 1) {\n        const banklist = [];\n        const { banks } = res;\n        for (const id in banks) {\n          const banklistOfId = banks[id];\n          for (const bank of banklistOfId) {\n            banklist.push(bank);\n          }\n        }\n        done(banklist);\n      } else {\n        alert(parseResult(res));\n      }\n    })\n    .fail(_ => alert('Không thể lấy danh sách ngân hàng'));\n  }\n\n  static refund(data, done) {\n    return postJSON(APIs.REFUND, data, \n      res => {\n        alert(parseResult(res));\n        done(res);\n      }, \n      () => {\n        alert('Hoàn tiền thất bại');\n      });\n  }\n\n  static getRefundStatus(mrefundid) {\n    return $.getJSON(APIs.GETREFUNDSTATUS +'?mrefundid='+ mrefundid)\n      .done(res => {\n        alert(parseResult(res));\n      })\n      .fail(_ => alert('Không thể lấy trạng thái hoàn tiền'));\n  }\n}"]},"metadata":{},"sourceType":"module"}