{"ast":null,"code":"import { APIs, postJSON, parseResult } from './common';\nexport class ZaloPay {\n  static listenCallback(apptransid, cb) {\n    const ws = new WebSocket(APIs.SUBSCRIBE + \"?apptransid=\" + apptransid);\n\n    ws.onopen = e => {\n      console.log('open ws', apptransid);\n    };\n\n    ws.onmessage = e => {\n      const data = JSON.parse(e.data);\n      console.log('ws message', data);\n      cb(data);\n      alert('Thanh toán thành công');\n    };\n\n    ws.onclose = e => {\n      console.log('close ws', apptransid);\n    };\n  }\n\n  static pay(url, data = {}, done) {\n    return postJSON(url, data, done, () => {\n      alert('Thanh toán thất bại');\n    });\n  }\n\n  static qr(data, done) {\n    ZaloPay.pay(APIs.QR, data, res => {\n      if (res.returncode === 1) {\n        done(res);\n      } else {\n        alert(parseResult(res));\n      }\n    });\n  }\n\n  static gateway(data) {\n    ZaloPay.pay(APIs.GATEWAY, data, orderurl => {\n      window.open(orderurl);\n    });\n  }\n\n  static quickPay(data, done) {\n    ZaloPay.pay(APIs.QUICKPAY, data, res => {\n      if (res.returncode >= 1) {\n        if (res.returncode == 1) {\n          alert('Thanh toán thành công');\n        } else {\n          done(res);\n        }\n      } else {\n        alert(parseResult(res));\n      }\n    });\n  }\n\n  static getbanklist(done) {\n    $.getJSON(APIs.GETBANKLIST).done(res => {\n      if (res.returncode === 1) {\n        const banklist = [];\n        const {\n          banks\n        } = res;\n\n        for (const id in banks) {\n          const banklistOfId = banks[id];\n\n          for (const bank of banklistOfId) {\n            banklist.push(bank);\n          }\n        }\n\n        done(banklist);\n      } else {\n        alert(parseResult(res));\n      }\n    }).fail(_ => alert('Không thể lấy danh sách ngân hàng'));\n  }\n\n  static refund(data, done) {\n    return postJSON(APIs.REFUND, data, res => {\n      alert(parseResult(res));\n      done(res);\n    }, () => {\n      alert('Hoàn tiền thất bại');\n    });\n  }\n\n  static getRefundStatus(mrefundid) {\n    return $.getJSON(APIs.GETREFUNDSTATUS + '?mrefundid=' + mrefundid).done(res => {\n      alert(parseResult(res));\n    }).fail(_ => alert('Không thể lấy trạng thái hoàn tiền'));\n  }\n\n}","map":{"version":3,"sources":["/Users/xuanloc/Documents/pet-shop/PetShopProject/frontend/src/components/zalopay.js"],"names":["APIs","postJSON","parseResult","ZaloPay","listenCallback","apptransid","cb","ws","WebSocket","SUBSCRIBE","onopen","e","console","log","onmessage","data","JSON","parse","alert","onclose","pay","url","done","qr","QR","res","returncode","gateway","GATEWAY","orderurl","window","open","quickPay","QUICKPAY","getbanklist","$","getJSON","GETBANKLIST","banklist","banks","id","banklistOfId","bank","push","fail","_","refund","REFUND","getRefundStatus","mrefundid","GETREFUNDSTATUS"],"mappings":"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","sourcesContent":["import { APIs, postJSON, parseResult } from './common';\n\nexport class ZaloPay {\n  static listenCallback(apptransid, cb) {\n    const ws = new WebSocket(APIs.SUBSCRIBE + \"?apptransid=\" + apptransid);\n    ws.onopen = e => {\n      console.log('open ws', apptransid);\n    };\n    ws.onmessage = e => {\n      const data = JSON.parse(e.data);\n      console.log('ws message', data);\n      cb(data);\n      alert('Thanh toán thành công');\n    };\n    ws.onclose = e => {\n      console.log('close ws', apptransid);\n    };\n  }\n\n  static pay(url, data = {}, done) {\n    return postJSON(url, data, done, () => {\n      alert('Thanh toán thất bại');\n    })\n  }\n  \n  static qr(data, done) {\n    ZaloPay.pay(APIs.QR, data, res => {\n      if (res.returncode === 1) {\n        done(res);\n      } else {\n        alert(parseResult(res));\n      }\n    });\n  }\n\n  static gateway(data) {\n    ZaloPay.pay(APIs.GATEWAY, data, orderurl => {\n      window.open(orderurl);\n    });\n  }\n\n  static quickPay(data, done) {\n    ZaloPay.pay(APIs.QUICKPAY, data, res => {\n      if (res.returncode >= 1) {\n        if (res.returncode == 1) {\n          alert('Thanh toán thành công');\n        } else {\n          done(res);\n        }\n      } else {\n        alert(parseResult(res));\n      }\n    });\n  }\n\n  static getbanklist(done) {\n    $.getJSON(APIs.GETBANKLIST)\n    .done(res => {\n      if (res.returncode === 1) {\n        const banklist = [];\n        const { banks } = res;\n        for (const id in banks) {\n          const banklistOfId = banks[id];\n          for (const bank of banklistOfId) {\n            banklist.push(bank);\n          }\n        }\n        done(banklist);\n      } else {\n        alert(parseResult(res));\n      }\n    })\n    .fail(_ => alert('Không thể lấy danh sách ngân hàng'));\n  }\n\n  static refund(data, done) {\n    return postJSON(APIs.REFUND, data, \n      res => {\n        alert(parseResult(res));\n        done(res);\n      }, \n      () => {\n        alert('Hoàn tiền thất bại');\n      });\n  }\n\n  static getRefundStatus(mrefundid) {\n    return $.getJSON(APIs.GETREFUNDSTATUS +'?mrefundid='+ mrefundid)\n      .done(res => {\n        alert(parseResult(res));\n      })\n      .fail(_ => alert('Không thể lấy trạng thái hoàn tiền'));\n  }\n}"]},"metadata":{},"sourceType":"module"}