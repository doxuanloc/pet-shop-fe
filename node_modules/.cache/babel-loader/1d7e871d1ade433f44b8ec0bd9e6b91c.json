{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/xuanloc/Documents/pet-shop/PetShopProject/frontend/src/components/Admin/Dashboard/Main/DashboardMain.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport '../../../../App.css';\nimport '../../../../Styles/Dashboard.css';\nimport { faFileInvoice, faMoneyBillWave, faStar, faTasks, faTshirt, faUser } from '@fortawesome/free-solid-svg-icons';\nimport DashboardTotalCount from './DashboardTotalCount';\nimport DashboardLocation from './DashboardLocation';\nimport DashboardTopFive from './DashboardTopFive';\nimport DashboardRecentReview from './DashboardRecentReview';\nimport axios from 'axios';\nimport DashboardChart from './DashboardChart';\nimport DashboardTodoList from './DashboardTodoList';\nimport DashboardChartPie from './DashboardChartPie';\nimport DashboardChartLine from './DashboardChartLine';\nexport default function DashboardMain() {\n  _s();\n\n  const [products, setProducts] = useState([]);\n  const [order, setOrder] = useState([]);\n  const [email, setEmail] = useState([]);\n  const [user, setUser] = useState([]);\n  const [topCustomer, setTopCusomer] = useState([]);\n  const [topProductSales, setTopProductSales] = useState([]);\n  const [totalIncome, setTotalIncome] = useState(0);\n  const [totalSale, setTotalSale] = useState(0);\n  const [orderMonthPercent, setOrderMonthPercent] = useState({});\n  const [saleMonthPercent, setSaleMonthPercent] = useState({});\n  const [incomeMonthPercent, setIncomeMonthPercent] = useState({});\n  useEffect(() => {\n    axios.get(`http://localhost:4000/products`).then(res => {\n      setProducts(res.data);\n      let virtualProducts = [...res.data];\n      virtualProducts.sort((a, b) => b.productSold - a.productSold);\n      let virtualProducts2 = [];\n\n      for (let i in virtualProducts) {\n        let data = { ...virtualProducts[i],\n          count: virtualProducts[i].productSold\n        };\n        virtualProducts2.push(data);\n      }\n\n      setTopProductSales(virtualProducts2);\n    });\n    axios.get(`http://localhost:4000/users/list`).then(res => {\n      setUser(res.data);\n    });\n    axios.get(`http://pe.heromc.net:4000/email`).then(res => {\n      setEmail(res.data);\n    });\n    axios.get(`http://localhost:4000/order`).then(res => {\n      setOrder(res.data);\n      const topCustomer2 = Object.values(res.data.reduce((a, {\n        orderEmail,\n        orderName,\n        orderTotal,\n        orderAvatar\n      }) => {\n        a[orderEmail] = a[orderEmail] || {\n          orderEmail,\n          orderName,\n          orderAvatar,\n          orderTotal,\n          count: 0\n        };\n        a[orderEmail].count++;\n        return a;\n      }, Object.create(null)));\n      topCustomer2.sort((a, b) => b.count - a.count);\n      setTopCusomer(topCustomer2);\n      var totalIncome = 0;\n      var totalSale = 0;\n\n      for (let i in res.data) {\n        for (let j in res.data[i].orderList) {\n          totalSale += res.data[i].orderList[j].amount;\n        }\n\n        totalIncome += res.data[i].orderTotal;\n      }\n\n      setTotalSale(totalSale);\n      setTotalIncome(totalIncome);\n      const currentMonth = new Date().getMonth() + 1;\n      const currentYear = new Date().getFullYear();\n      let lastYear = new Date().getFullYear();\n      let lastMonth = 0;\n\n      if (currentMonth === 1) {\n        lastMonth = 12;\n        lastYear = currentYear - 1;\n      } else {\n        lastMonth = currentMonth - 1;\n        lastYear = currentYear;\n      }\n\n      const currentOrder = [];\n      const lastMonthOrder = [];\n      let currentTotalIncome = 0;\n      let currentTotalSale = 0;\n      let lastCurrentTotalIncome = 0;\n      let lastCurrentTotalSale = 0;\n\n      for (let i in res.data) {\n        if (new Date(res.data[i].orderDate).getMonth() + 1 === currentMonth && new Date(res.data[i].orderDate).getFullYear() === currentYear) {\n          currentOrder.push(res.data[i]);\n          currentTotalIncome += res.data[i].orderTotal;\n        }\n\n        if (new Date(res.data[i].orderDate).getMonth() + 1 === lastMonth && new Date(res.data[i].orderDate).getFullYear() === lastYear) {\n          lastMonthOrder.push(res.data[i]);\n          lastCurrentTotalIncome += res.data[i].orderTotal;\n        }\n\n        for (let j in res.data[i].orderList) {\n          if (new Date(res.data[i].orderDate).getMonth() + 1 === currentMonth && new Date(res.data[i].orderDate).getFullYear() === currentYear) {\n            currentTotalSale += res.data[i].orderList[j].amount;\n          }\n\n          if (new Date(res.data[i].orderDate).getMonth() + 1 === lastMonth && new Date(res.data[i].orderDate).getFullYear() === lastYear) {\n            lastCurrentTotalSale += res.data[i].orderList[j].amount;\n          }\n        }\n      }\n\n      if (currentOrder.length >= lastMonthOrder.length) {\n        setOrderMonthPercent({\n          percent: Math.ceil((currentOrder.length - lastMonthOrder.length) / lastMonthOrder.length * 100),\n          isDecrease: true\n        });\n      } else {\n        setOrderMonthPercent({\n          percent: Math.ceil((lastMonthOrder.length - currentOrder.length) / lastMonthOrder.length * 100),\n          isDecrease: false\n        });\n      }\n\n      if (currentTotalSale >= lastCurrentTotalSale) {\n        setSaleMonthPercent({\n          percent: Math.ceil((currentTotalSale - lastCurrentTotalSale) / lastCurrentTotalSale * 100),\n          isDecrease: true\n        });\n      } else {\n        setSaleMonthPercent({\n          percent: Math.ceil((lastCurrentTotalSale - currentTotalSale) / lastCurrentTotalSale * 100),\n          isDecrease: false\n        });\n      }\n\n      if (currentTotalIncome >= lastCurrentTotalIncome) {\n        setIncomeMonthPercent({\n          percent: Math.ceil((currentTotalIncome - lastCurrentTotalIncome) / lastCurrentTotalIncome * 100),\n          isDecrease: true\n        });\n      } else {\n        setIncomeMonthPercent({\n          percent: Math.ceil((lastCurrentTotalIncome - currentTotalIncome) / lastCurrentTotalIncome * 100),\n          isDecrease: false\n        });\n      }\n    });\n  }, []);\n  const totalCount = [{\n    id: 1,\n    title: \"Total orders\",\n    count: order.length,\n    percent: orderMonthPercent.percent,\n    isDecrease: orderMonthPercent.isDecrease,\n    color: \"orange\",\n    icon: faFileInvoice\n  }, {\n    id: 2,\n    title: \"Total sales\",\n    count: `${totalSale}`,\n    percent: saleMonthPercent.percent,\n    isDecrease: saleMonthPercent.isDecrease,\n    color: \"pink\",\n    icon: faTshirt\n  }, {\n    id: 3,\n    title: \"Income\",\n    count: `${totalIncome}Ä‘`,\n    percent: incomeMonthPercent.percent,\n    isDecrease: incomeMonthPercent.isDecrease,\n    color: \"green\",\n    icon: faMoneyBillWave\n  }, {\n    id: 4,\n    title: \"Users\",\n    count: user.length,\n    percent: 20,\n    isDecrease: true,\n    color: \"lightblue\",\n    icon: faUser\n  }];\n  const recentVote = [];\n\n  if (products.length > 0) {\n    for (let i = 0; i < products.length; i++) {\n      const productVote = products[i].productVote;\n\n      for (let j = 0; j < productVote.length; j++) {\n        const newRatingDate = new Date(productVote[j].ratingDate);\n        productVote[j].productName = products[i].productName;\n\n        if (newRatingDate.getDate() === new Date().getDate()) {\n          let hours = newRatingDate.getHours().toString();\n          let minutes = newRatingDate.getMinutes().toString();\n\n          if (hours < 10) {\n            hours = \"0\" + hours;\n          }\n\n          if (minutes < 10) {\n            minutes = \"0\" + minutes;\n          }\n\n          productVote[j].ratingHours = hours;\n          productVote[j].ratingMinutes = minutes;\n        } else {\n          let days = newRatingDate.getDate().toString();\n          let months = (newRatingDate.getMonth() + 1).toString();\n\n          if (days < 10) {\n            days = \"0\" + days;\n          }\n\n          if (months < 10) {\n            months = \"0\" + months;\n          }\n\n          productVote[j].ratingDays = days;\n          productVote[j].ratingMonths = months;\n          productVote[j].ratingYears = newRatingDate.getFullYear().toString();\n        }\n\n        recentVote.push(productVote[j]);\n      }\n    }\n  }\n\n  if (recentVote) {\n    recentVote.sort(function (a, b) {\n      return new Date(b.ratingDate) - new Date(a.ratingDate);\n    });\n  }\n\n  const topRecentVote = recentVote.splice(0, 5);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-main\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row flex\",\n      children: totalCount.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(DashboardTotalCount, {\n          item: item\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DashboardLocation, {\n      order: order\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row flex\",\n      children: [/*#__PURE__*/_jsxDEV(DashboardChartPie, {\n        email: email,\n        color: \"pink\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DashboardTopFive, {\n        icon: faUser,\n        title: \"Top customers by orders\",\n        color: \"lightblue\",\n        data: topCustomer,\n        table: [{\n          title: 'User name'\n        }, {\n          title: 'Total orders'\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row flex\",\n      children: [/*#__PURE__*/_jsxDEV(DashboardRecentReview, {\n        icon: faStar,\n        title: \"Recent Reviews\",\n        color: \"orange\",\n        topRecentVote: topRecentVote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DashboardTodoList // recent orders\n      , {\n        icon: faTasks,\n        title: \"Todo list\",\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row flex\",\n      children: /*#__PURE__*/_jsxDEV(DashboardChartLine, {\n        icon: faTasks,\n        order: order,\n        color: \"pink\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DashboardMain, \"r6Yg4e8zxHE4x3Qkc3rk3W5o40I=\");\n\n_c = DashboardMain;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashboardMain\");","map":{"version":3,"sources":["/Users/xuanloc/Documents/pet-shop/PetShopProject/frontend/src/components/Admin/Dashboard/Main/DashboardMain.js"],"names":["React","useEffect","useState","faFileInvoice","faMoneyBillWave","faStar","faTasks","faTshirt","faUser","DashboardTotalCount","DashboardLocation","DashboardTopFive","DashboardRecentReview","axios","DashboardChart","DashboardTodoList","DashboardChartPie","DashboardChartLine","DashboardMain","products","setProducts","order","setOrder","email","setEmail","user","setUser","topCustomer","setTopCusomer","topProductSales","setTopProductSales","totalIncome","setTotalIncome","totalSale","setTotalSale","orderMonthPercent","setOrderMonthPercent","saleMonthPercent","setSaleMonthPercent","incomeMonthPercent","setIncomeMonthPercent","get","then","res","data","virtualProducts","sort","a","b","productSold","virtualProducts2","i","count","push","topCustomer2","Object","values","reduce","orderEmail","orderName","orderTotal","orderAvatar","create","j","orderList","amount","currentMonth","Date","getMonth","currentYear","getFullYear","lastYear","lastMonth","currentOrder","lastMonthOrder","currentTotalIncome","currentTotalSale","lastCurrentTotalIncome","lastCurrentTotalSale","orderDate","length","percent","Math","ceil","isDecrease","totalCount","id","title","color","icon","recentVote","productVote","newRatingDate","ratingDate","productName","getDate","hours","getHours","toString","minutes","getMinutes","ratingHours","ratingMinutes","days","months","ratingDays","ratingMonths","ratingYears","topRecentVote","splice","map","item","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport '../../../../App.css'\nimport '../../../../Styles/Dashboard.css'\nimport { faFileInvoice, faMoneyBillWave, faStar, faTasks, faTshirt, faUser } from '@fortawesome/free-solid-svg-icons'\nimport DashboardTotalCount from './DashboardTotalCount'\nimport DashboardLocation from './DashboardLocation'\nimport DashboardTopFive from './DashboardTopFive'\nimport DashboardRecentReview from './DashboardRecentReview'\nimport axios from 'axios'\nimport DashboardChart from './DashboardChart'\nimport DashboardTodoList from './DashboardTodoList'\nimport DashboardChartPie from './DashboardChartPie'\nimport DashboardChartLine from './DashboardChartLine'\n\nexport default function DashboardMain() {\n\n    const [products, setProducts] = useState([]);\n    const [order, setOrder] = useState([]);\n    const [email, setEmail] = useState([]);\n    const [user, setUser] = useState([]);\n    const [topCustomer, setTopCusomer] = useState([]);\n    const [topProductSales, setTopProductSales] = useState([]);\n    const [totalIncome, setTotalIncome] = useState(0);\n    const [totalSale, setTotalSale] = useState(0);\n    const [orderMonthPercent, setOrderMonthPercent] = useState({})\n    const [saleMonthPercent, setSaleMonthPercent] = useState({})\n    const [incomeMonthPercent, setIncomeMonthPercent] = useState({}) \n\n    useEffect(()=>{\n        axios.get(`http://localhost:4000/products`)\n            .then(res => {\n                setProducts(res.data)\n                let virtualProducts = [...res.data]\n                virtualProducts.sort((a,b) =>  b.productSold - a.productSold)\n                let virtualProducts2 = []\n                for (let i in virtualProducts) {\n                    let data = {\n                        ...virtualProducts[i],\n                        count: virtualProducts[i].productSold\n                    }\n                    virtualProducts2.push(data)\n                }\n                setTopProductSales(virtualProducts2)\n            }\n        )\n        axios.get(`http://localhost:4000/users/list`)\n            .then(res => {\n                setUser(res.data)\n            }\n        ) \n        axios.get(`http://pe.heromc.net:4000/email`)\n            .then(res => {\n                setEmail(res.data)\n            }\n        ) \n        axios.get(`http://localhost:4000/order`)\n            .then(res => {\n                setOrder(res.data)\n                const topCustomer2 = Object.values(res.data.reduce((a, {orderEmail, orderName, orderTotal, orderAvatar}) => {\n                    a[orderEmail] = a[orderEmail] || {orderEmail, orderName, orderAvatar, orderTotal, count: 0};\n                    a[orderEmail].count++;\n                    return a;\n                }, Object.create(null)));\n                topCustomer2.sort((a,b) =>  b.count - a.count)\n                setTopCusomer(topCustomer2)\n\n                var totalIncome = 0;\n                var totalSale = 0;\n                for(let i in res.data) {\n                    for(let j in res.data[i].orderList) {\n                        totalSale += res.data[i].orderList[j].amount\n                    }\n                    totalIncome += res.data[i].orderTotal\n                }\n                setTotalSale(totalSale)\n                setTotalIncome(totalIncome) \n\n                const currentMonth = new Date().getMonth() + 1\n                const currentYear = new Date().getFullYear()\n                let lastYear = new Date().getFullYear()\n                let lastMonth = 0\n                if (currentMonth === 1) {\n                    lastMonth = 12\n                    lastYear = currentYear - 1\n                } else {\n                    lastMonth = currentMonth - 1\n                    lastYear = currentYear\n                }\n                const currentOrder = []\n                const lastMonthOrder = []\n                let currentTotalIncome = 0;\n                let currentTotalSale = 0;\n                let lastCurrentTotalIncome = 0;\n                let lastCurrentTotalSale = 0;\n                for (let i in res.data) {\n                    if (new Date(res.data[i].orderDate).getMonth()+1 === currentMonth &&\n                        new Date(res.data[i].orderDate).getFullYear() === currentYear) {\n                        currentOrder.push(res.data[i]) \n                        currentTotalIncome += res.data[i].orderTotal\n                    } \n                    if (new Date(res.data[i].orderDate).getMonth()+1 === lastMonth &&\n                        new Date(res.data[i].orderDate).getFullYear() === lastYear) {\n                        lastMonthOrder.push(res.data[i]) \n                        lastCurrentTotalIncome += res.data[i].orderTotal\n                    }\n                    for(let j in res.data[i].orderList) {\n                        if (new Date(res.data[i].orderDate).getMonth()+1 === currentMonth &&\n                            new Date(res.data[i].orderDate).getFullYear() === currentYear) { \n                            currentTotalSale += res.data[i].orderList[j].amount \n                        } \n                        if (new Date(res.data[i].orderDate).getMonth()+1 === lastMonth &&\n                            new Date(res.data[i].orderDate).getFullYear() === lastYear) { \n                            lastCurrentTotalSale += res.data[i].orderList[j].amount \n                        }\n                    }\n                }   \n\n                if (currentOrder.length >= lastMonthOrder.length) {\n                    setOrderMonthPercent({\n                        percent: Math.ceil(((currentOrder.length - lastMonthOrder.length)/lastMonthOrder.length) * 100),\n                        isDecrease: true\n                    })\n                } else { \n                    setOrderMonthPercent({\n                        percent: Math.ceil(((lastMonthOrder.length - currentOrder.length)/lastMonthOrder.length) * 100),\n                        isDecrease: false\n                    })\n                }\n                if (currentTotalSale >= lastCurrentTotalSale) {\n                    setSaleMonthPercent({\n                        percent: Math.ceil(((currentTotalSale - lastCurrentTotalSale)/lastCurrentTotalSale) * 100),\n                        isDecrease: true\n                    })\n                } else { \n                    setSaleMonthPercent({\n                        percent: Math.ceil(((lastCurrentTotalSale - currentTotalSale)/lastCurrentTotalSale) * 100),\n                        isDecrease: false\n                    })\n                }\n                if (currentTotalIncome >= lastCurrentTotalIncome) {\n                    setIncomeMonthPercent({\n                        percent: Math.ceil(((currentTotalIncome - lastCurrentTotalIncome)/lastCurrentTotalIncome) * 100),\n                        isDecrease: true\n                    })\n                } else { \n                    setIncomeMonthPercent({\n                        percent: Math.ceil(((lastCurrentTotalIncome - currentTotalIncome)/lastCurrentTotalIncome) * 100),\n                        isDecrease: false\n                    })\n                }\n            }\n        ) \n    }, []) \n\n    const totalCount = [\n        {\n            id: 1,\n            title: \"Total orders\",\n            count: order.length,\n            percent: orderMonthPercent.percent,\n            isDecrease: orderMonthPercent.isDecrease,\n            color: \"orange\",\n            icon: faFileInvoice\n        },\n        {\n            id: 2,\n            title: \"Total sales\",\n            count: `${totalSale}`,\n            percent: saleMonthPercent.percent,\n            isDecrease: saleMonthPercent.isDecrease,\n            color: \"pink\",\n            icon: faTshirt\n        },\n        {\n            id: 3,\n            title: \"Income\",\n            count: `${totalIncome}Ä‘`,\n            percent: incomeMonthPercent.percent,\n            isDecrease: incomeMonthPercent.isDecrease,\n            color: \"green\",\n            icon: faMoneyBillWave\n        },\n        {\n            id: 4,\n            title: \"Users\",\n            count: user.length,\n            percent: 20,\n            isDecrease: true,\n            color: \"lightblue\",\n            icon: faUser\n        },\n    ]\n\n    const recentVote = [];\n    if (products.length > 0) {\n        for (let i = 0; i < products.length; i++) {\n            const productVote = products[i].productVote;\n            for (let j = 0; j < productVote.length; j++) {\n                const newRatingDate = new Date(productVote[j].ratingDate);\n                productVote[j].productName = products[i].productName;\n                if (newRatingDate.getDate() === new Date().getDate()) {\n                    let hours = newRatingDate.getHours().toString();\n                    let minutes = newRatingDate.getMinutes().toString();\n                    if (hours < 10) {\n                        hours = \"0\" + hours\n                    }\n                    if (minutes < 10) {\n                        minutes = \"0\" + minutes\n                    }\n                    productVote[j].ratingHours = hours;\n                    productVote[j].ratingMinutes = minutes;\n                } else {\n                    let days = newRatingDate.getDate().toString();\n                    let months = (newRatingDate.getMonth()+1).toString();\n                    if (days < 10) {\n                        days = \"0\" + days\n                    }\n                    if (months < 10) {\n                        months = \"0\" + months\n                    }\n                    productVote[j].ratingDays = days;\n                    productVote[j].ratingMonths = months;\n                    productVote[j].ratingYears = newRatingDate.getFullYear().toString();\n                }\n                recentVote.push(productVote[j])\n            }\n        }\n    }\n\n    if (recentVote) {\n        recentVote.sort(function(a,b){\n            return new Date(b.ratingDate) - new Date(a.ratingDate);\n        });\n    }\n\n    const topRecentVote = recentVote.splice(0,5)\n    \n    return (\n        <div className=\"dashboard-main\">\n            <div className=\"row flex\">\n                { totalCount.map((item, index)=> { \n                    return (\n                        <DashboardTotalCount\n                            key = {index}\n                            item = {item}\n                        />\n                    )\n                })}\n            </div>\n            <DashboardLocation\n                order={order}\n            /> \n            <div className=\"row flex\">\n                <DashboardChartPie\n                    email = {email}\n                    color = \"pink\"\n                />\n                <DashboardTopFive\n                    icon = {faUser}\n                    title = \"Top customers by orders\"\n                    color = \"lightblue\"\n                    data = {topCustomer}\n                    table = {[\n                        {\n                            title: 'User name'\n                        },\n                        {\n                            title: 'Total orders'\n                        },\n                    ]}\n                />\n            </div>\n            <div className=\"row flex\">\n                <DashboardRecentReview\n                    icon = {faStar}\n                    title = \"Recent Reviews\"\n                    color = \"orange\"\n                    topRecentVote = {topRecentVote}\n                />\n                <DashboardTodoList // recent orders\n                    icon = {faTasks}\n                    title = \"Todo list\"\n                    color = \"green\"\n                />\n            </div>\n            <div className=\"row flex\">\n                <DashboardChartLine\n                    icon = {faTasks}\n                    order = {order}\n                    color = \"pink\"\n                />\n            </div>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}